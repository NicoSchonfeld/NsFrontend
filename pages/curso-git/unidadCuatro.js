import React from "react";
import Layout from "../../components/Layout";
import styles from "../../styles/git.module.css";
import Link from "next/link";
import Image from "next/image";

export default function unidadCuatro() {
  return (
    <Layout
      title="Unidad n¬∞ 4 Git/Github | NS FrontEnd"
      description="Unidad numero cuatro del curso de Git & Github"
    >
      <section className={styles.sectionOne}>
        <div className={styles.bgInitial}>
          <p className={styles.titleBg}>Fundamentos de Git.</p>
        </div>
        <div className={styles.containerVolver}>
          <Link href="/curso-git">
            <a className={styles.volver}>Volver Atr√°s</a>
          </Link>
        </div>

        <article className={styles.wrapper}>
          <h3 className={styles.title}>Unidad n¬∞ 4</h3>

          <p className={styles.parrafo}>
            Antes que nada, lo primero que haremos es crear un proyecto para
            subir a Github, si no ten√©s un proyecto pod√≥s empezar a crear uno y
            luego hacer este curso o bien pod√©s crear archivos de prueba en una
            carpeta random para aprender a usar Git.
          </p>

          <h4 className={styles.subTitle}>Proyecto de ejemplo</h4>
          <p className={styles.parrafo}>
            S√≠ simplemente quer√©s aprender y practicar, vamos a crear un
            proyecto falso (de prueba) para subir a GitHub a trav√©s de Git y
            aprender c√≥mo se usa.
          </p>

          <p className={styles.parrafo}>
            Abriremos la consola ubicada en el escritorio, crearemos una
            carpeta, con un archivo index.html. <br />
            Dentro del archivo html, crearemos la estructura b√°sica y
            colocaremos un h1 que diga "Hola a todos" junto a un p√°rrafo que
            diga "Este es mi primer proyecto en github" y colocaremos un enlace
            con la URL de nuestro perfil de github.
            <br />
            <br />
            Esto es simplemente para tener algo y poder subirlo, pero pod√©s
            crear el proyecto que vos quieras.
            <br />
            Una vez hecho esto es hora de subirlo a github, nos vamos a ubicar
            dentro de nuestra carpeta que acabamos de crear y vamos a abrir la
            consola o podemos acceder a la carpeta a trav√©s de ella. <br />
            Una vez dentro, en nuestra terminal podemos colocar los comandos
            b√°sicos.
          </p>

          <h4 className={styles.subTitle}>Comandos b√°sicos</h4>
          <p className={styles.parrafo}>
            Aprendamos a usar los comandos b√°sicos de git (de igual manera
            podemos colocar git help y podremos ver todos los comandos que
            podremos utilizar).
          </p>

          <h4 className={styles.subTitle}>Git version</h4>
          <p className={styles.parrafo}>
            Para ver qu√© versi√≥n de git tenemos instalada, colocaremos en la
            terminal <span>git version</span>. <br />
            Esto nos mostrara por consola la versi√≥n que estamos utilizando.(S
            por alguna raz√≥n les da error o les dice que no encuentra la
            versi√≥n, lo m√°s probable es que no Git no este instalado y tendr√°n
            que instalarlo nuevamente)
          </p>

          <h4 className={styles.subTitle}>Git init</h4>
          <p className={styles.parrafo}>
            <span>git init</span>: lo que estamos haciendo con este proyecto es
            decirle a Git todos los archivos que tengamos en esa carpeta los
            tranforme en un repositorio (
            <span>Se ejecuta solo una vez por proyecto</span>).
            <br />
            S√≠ notamos a la hora de colocar este comando que los archivos que
            hayamos creado, el nombre de cada archivo se colocara de color rojo.
            ¬°No se asusten! esto significa que Git est√° haciendo un seguimiento
            de nuestros archivos.
          </p>

          <h4 className={styles.subTitle}>Git status</h4>
          <p className={styles.parrafo}>
            <span>git status</span>: Lo que va a hacer este comando es escanear
            los archivos y mostrarnos a trav√©s de una lista, todos los archivos
            que tengamos sin subir a nuestro repositorio.
            <br />
            B√°sicamente te muestra el estado de tus archivos.
          </p>

          <h4 className={styles.subTitle}>Git add</h4>
          <p className={styles.parrafo}>
            <span>git add .</span>: Lo que va a hacer este comando es agregar
            todos los archivos para que est√© pendiente de los cambios.
            <br />
            En otras palabras a todos los archivos que los muestre en rojo, al
            colocar "git add ." lo que va a hacer es agarrar todos estos
            archivos y guardarlos.
            <br />
            <br />
            Si volvemos a colocar "git status" nos va a mostrar por consola
            todos los archivos que se guardaron de color verde.
          </p>

          <h4 className={styles.subTitle}>Git commit</h4>
          <p className={styles.parrafo}>
            <span>git commit -m "primer commit"</span>: Lo que va a hacer este
            comando es etiquetar o nombrar todos esos archivos que guardamos.
            <br />
            <br />
            Para que se entienda supongamos que tenemos un mont√≥n de im√°genes en
            el escritorio y las queremos guardar en una carpeta para mantener un
            orden.
            <br />
            Bueno, guardar todas esas fotos en esa carpeta ser√≠a c√≥mo colocar el
            comando <span>git add .</span> y colocarle un nombre a la carpeta
            ser√≠a como colocar el comando{" "}
            <span>git commit -m "Aqu√≠ ponen el nombre"</span>, y{" "}
            <span>git status</span> ser√≠a como abrir la carpeta y ver todas las
            fotos que tenemos dentro de esa carpeta. ¬øSe entendi√≥? ü§î
            <br />
            Bueno espero que s√≠. üòÑ
          </p>

          <p className={styles.parrafo}>
            De esa forma cada vez que nosotros agamos un cambio en nuestro
            proyecto, tendremos que agregarlos con git add y tendremos que
            colocarle un nombre con git commit. De esa forma estamos creando
            versiones de nuestro proyecto. <br />
            <br />
            Ejemplo: creamos un index.html con un t√≠tulo, lo guardamos y le
            colocamos el commit de "coloque un t√≠tulo".
            <br /> Luego volvemos al archivo index.html y colocamos una imagen,
            lo guardamos y nuevamente colocamos un commit de "Colocamos una
            imagen". <br />
            As√≠ estamos creando versiones de nuestro proyecto, cada vez que
            coloquen algo nuevo en su proyecto lo guardan y lo nombran con un
            commit.
            <br />
            <br />
            Esos son los comandos b√°sicos para utilizar con Git, pero nuestro
            proyecto a√∫n no se subi√≥ a GitHub.
            <br />
            Para ello primero necesitamos vincular nuestra cuenta de github con
            nuestro proyecto.
          </p>

          <h4 className={styles.subTitle}>Ingresar nombre de usuario</h4>
          <p className={styles.parrafo}>
            Para vincular github con nuestro proyecto necesitamos colocarle
            nuestro nombre de usuario, para ello colocaremos: <br />
            <span>git config --global user.name "mi nombre"</span>
          </p>

          <h4 className={styles.subTitle}>Ingresar su email</h4>
          <p className={styles.parrafo}>
            Adem√°s tenemos que pasarle el email de nuestro github, para ello
            colocaremos: <br />
            <span>git config --global user.email "pepe@gmail.com"</span>
          </p>

          <p className={styles.parrafo}>
            De esa forma ya estamos vinculando github con nuestro proyecto, pero
            si se fijan bien, cu√°ndo vinculamos nuestra cuenta le pasamos una
            propiedad llamada <span>"--global"</span>, esto lo que hace es que
            estamos vinculando nuestra cuenta de forma global, es decir que no
            vamos a tener que vincular nuestra cuenta nuevamente porque ya lo
            definimos para que quede registrada en nuestra computadora y no en
            un solo proyecto. <br />
            Esto nos sirve para no tener que andar vinculando cuentas por cada
            proyecto que hagamos.
          </p>

          <div className={styles.containerLeccion}>
            <Link href="/curso-git/unidadCinco">
              <a>
                <button className={styles.btn}>Siguiente lecci√≥n</button>
              </a>
            </Link>
          </div>
        </article>
      </section>
    </Layout>
  );
}
